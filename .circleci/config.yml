# CircleCI 2.1 configuration file
# Check https://circleci.com/docs/2.0/configuration-reference/ for more details
#
# Note: YAML anchors allow an object to be re-used, reducing duplication.
# The ampersand declares an alias for an object, then later the `<<: *name`
# syntax dereferences it.
#
# Define YAML anchors
.global_environment_vars: &global_environment_vars
  DEV_IMAGE_REPO: 'anchore/anchore-engine-dev'
  PROD_IMAGE_REPO: 'anchore/anchore-engine-dev'
  RELEASE_BRANCHES: '0.2 0.3 0.4 0.5 0.6'
  LATEST_RELEASE_BRANCH: '0.6'

.attach_workspace: &attach_workspace
  attach_workspace:
    at: /home/circleci/workspace/

.load_docker_image: &load_docker_image
  run:
    name: Load Docker image layer cache
    command: |
      docker load -i "/home/circleci/workspace/caches/${CIRCLE_SHA1}.tar" || true

.filter_rc_tags: &filter_rc_tags
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+(\.[0-9]+)*-rc[0-9]+$/

.filter_release_branch: &filter_release_branch
  branches:
    only: 
      - /^[0-9]+(\.[0-9]+)$/
      - master
      - /^ci-.*/

.filter_semver_tags: &filter_semver_tags
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+(\.[0-9]+)*$/

# Start circleci configuration
version: 2.1
orbs:
  anchore: anchore/anchore-engine@1.6.5
commands:
  run_tox_tests:
    description: |
      Uses the make target name for the specified test to run. 
      Saves the tox cache & stores log output as artifacts
    parameters:
      test_type:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: run tests
          command: make test-<< parameters.test_type >>
      - save_cache:
          paths:
            - ~/project/.tox
          key: v1-dependencies-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - store_artifacts:
          path: .tox/tox.log
      - store_test_results:
          path: .tox/results

jobs:
  unit_tests:
    docker:
      - image: circleci/python:3.6
    environment: *global_environment_vars
    steps:
      - run_tox_tests:
          test_type: "unit"
    
  integration_tests:
    docker:
      - image: circleci/python:3.6
      - image: anchore/test-infra-minio:latest
        command:
          - server
          - /data
      - image: anchore/test-infra-swift:latest
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_PASSWORD: "postgres"
    environment:
      <<: *global_environment_vars
      ANCHORE_TEST_S3_ACCESS_KEY: "9EB92C7W61YPFQ6QLDOU"
      ANCHORE_TEST_S3_SECRET_KEY: "TuHo2UbBx+amD3YiCeidy+R3q82MPTPiyd+dlW+s"
      ANCHORE_TEST_S3_URL: "http://localhost:9000"
      ANCHORE_TEST_S3_BUCKET: "testarchivebucket"

      ANCHORE_TEST_SWIFT_AUTH_URL: "http://localhost:8080/auth/v1.0"
      ANCHORE_TEST_SWIFT_KEY: "testing"
      ANCHORE_TEST_SWIFT_USER: "test:tester"
      ANCHORE_TEST_SWIFT_CONTAINER: "testarchive"

      ANCHORE_TEST_DB_URL: "postgresql+pg8000://postgres@localhost:5432/circle_test"
      ANCHORE_TEST_DB_USER: "postgres"
      ANCHORE_TEST_DB_PASS: "postgres"
      ANCHORE_TEST_DATA_ENV_DIR: "test/data/test_data_env"
    steps:
      - setup_remote_docker
      - run_tox_tests:
          test_type: "integration"

  build:
    docker:
      - image: circleci/python:3.6
    environment: *global_environment_vars
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Build Docker image
          command: make build
      - run:
          name: Run compose tests
          command: |
            # forward port 8228 from remote-docker to runner
            ssh -MS anchore -fN4 -L 8228:localhost:8228 remote-docker
            make test-compose
      - run:
          name: Save image to workspace
          command: |
            rm -rf /home/circleci/workspace/caches/
            mkdir -p /home/circleci/workspace/caches/
            docker save -o "/home/circleci/workspace/caches/${CIRCLE_SHA1}.tar" anchore-engine:test
      - persist_to_workspace:
          root: /home/circleci/workspace/
          paths:
            - caches/*

  push_dockerhub:
    docker:
      - image: circleci/python:3.6
    environment: *global_environment_vars
    steps:
      - setup_remote_docker
      - checkout
      - <<: *attach_workspace
      - <<: *load_docker_image
      - run:
          name: Push to Dockerhub
          command: |
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            make push



workflows:
  default_workflow:
    jobs:
      - unit_tests
      - integration_tests
      - build:
          context: dockerhub
          filters: *filter_release_branch
      - push_dockerhub:
          context: dockerhub
          filters: *filter_release_branch
          requires:
            - build
            - unit_tests
            - integration_tests
      - trigger_downstream:
          context: release_candidates
          requires:
            - push_dockerhub
      - anchore/image_scan:
          context: dockerhub
          requires:
            - push_dockerhub
          image_name: 'anchore/anchore-engine-dev:${CIRCLE_SHA1}'
          private_registry: true
          timeout: '2000'
