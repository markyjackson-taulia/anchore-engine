#!/usr/bin/env bash

# This is intended to be called by the scripts/ci/make/run_task_command wrapper script
# DO NOT try to execute directly, it probably will not work

# All ENVIRONMENT VARIABLES for task are declared in the project Makefile

# Required ENV vars
test "${COMMIT_SHA:?'required variable'}"
test "${DEV_IMAGE_REPO:?'required variable'}"
test "${GIT_BRANCH:?'required variable'}"
test "${TEST_IMAGE_NAME:?'required variable'}"

# Optional ENV vars
test "${CI:-'optional variable'}"
test "${DOCKER_PASS:-'optional variable'}"
test "${DOCKER_USER:-'optional variable'}"
test "${RELEASE_BRANCHES:-'optional variable'}"

local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
local latest_image="${DEV_IMAGE_REPO}:latest"
local branch_image="${DEV_IMAGE_REPO}:${GIT_BRANCH}"

if [[ "${CI:-null}" == true ]]; then
    echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

    print_colorized WARN "tagging and pushing image -- ${dev_image}"
    docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
    docker push "${dev_image}"

    if [[ "${GIT_BRANCH}" == 'master' ]]; then
        print_colorized WARN "tagging & pushing image -- ${latest_image}"
        docker tag "${dev_image}" "${latest_image}"
        docker push "${latest_image}"
    elif [[ "${GIT_BRANCH}" =~ "${RELEASE_BRANCHES}" ]]; then
        print_colorized WARN "tagging & pushing image -- ${branch_image}"
        docker tag "${dev_image}" "${branch_image}"
        docker push "${branch_image}"
    fi
else
    print_colorized WARN "tagging and pushing image -- ${dev_image}"
    continue_prompt
    docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
    docker push "${dev_image}"
fi